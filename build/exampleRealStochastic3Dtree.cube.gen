#include "stdtube.procgen"

parameter float GROWRATE =  0.6;
parameter float ANGLE =  30.0;

parameter vec3 BRANCHCOLOR;

parameter int iterations = 3;
parameter float stochasticity = 0.5;

using block = struct
{
    vec3 position;
    vec3 color;
    vec3 sz;
};

using metablock = struct
{
    block bck;
    vec3 direction;
    int remaining;
};

int addBranch(vec3 start, metablock parent,float rotation)
{
    // get a new vector 
    float stochasticAngle = ANGLE + uniform(-stochasticity, stochasticity)*ANGLE;
    vec3 dirAngled = vec3VectorWithAngle(vec3Normalize(parent.direction), 3.1415*stochasticAngle/180.0);

    // rotate new vector around its parent
    mat3 rot = mat3RotateArbitrary(vec3Normalize(parent.direction), rotation);

    // finally, get direction vector for new branch
    vec3 branchDirection = mat3MulVec3(rot, dirAngled);


    appendSymbol(metablock(block(start, BRANCHCOLOR, parent.bck.sz), branchDirection, parent.remaining -1));
    //appendSymbol(block(vec3Add(start, branchDirection), vec3(0.0,1.0,0.0), vec3(0.1,0.1,0.1)));
}
using leaf = rule metablock
{
    if(this.remaining == 0)
    {
        return true;
    }
    return false;
} {
    vec3 unitVector = vec3Normalize(this.direction);
    unitVector = vec3Add(this.bck.position, vec3ScalarMul(unitVector, this.bck.sz.z));
    vec3 newSize = vec3ScalarMul(this.bck.sz,GROWRATE);
    makeTube(this.bck.position, unitVector, this.bck.sz.x,newSize.x, this.bck.color,5.0);

    makeLeaf(unitVector, this.direction, this.bck.sz.z*0.4);
};
using transformRule = rule metablock
{
    if(this.remaining > 0)
    {
        return true;
    }
    return false;
} {
    vec3 unitVector = vec3Normalize(this.direction);
    unitVector = vec3Add(this.bck.position, vec3ScalarMul(unitVector, this.bck.sz.z));

    float stochasticGrow = GROWRATE+uniform(-stochasticity, stochasticity)*GROWRATE;
    vec3 newSize = vec3ScalarMul(this.bck.sz,stochasticGrow);
    makeTube(this.bck.position, unitVector, this.bck.sz.x,newSize.x, this.bck.color,5.0);
    
    vec3 newStart = unitVector;

    this.bck.sz = newSize;

    // add branches
    addBranch(newStart,this,3.14*120.0/180.0);
    addBranch(newStart,this,3.14*240.0/180.0);
    addBranch(newStart,this,3.14*0.0/180.0);

};

int init()
{
    BRANCHCOLOR = vec3(0.44,0.17,0.0);
    appendSymbol(metablock(block(vec3(0.0,0.0,0.0), BRANCHCOLOR, vec3(0.2,0.2,3.0)), vec3(0.0,1.0,0.0),iterations));
}
