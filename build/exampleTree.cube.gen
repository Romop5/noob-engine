// Simple voxel tree
// Roman Dobias
//
#include "stdcubes.gen"
using root = struct {
    vec3 position;
    vec3 direction;
    // size of root
    float radius;
};

using leaf = struct {
    root node;
};

leaf cleaf(root node)
{
    leaf tmp;
    tmp.node = node;
    return tmp;
}

root croot(vec3 pos, vec3 dir,  float rad)
{
    root tmp;
    tmp.position = pos;
    tmp.direction = dir;
    tmp.radius = rad;
    return tmp;
}

//-------------------------------------
// Init
//-------------------------------------
int init()
{
    appendSymbol(croot(cvec3(0.0,0.0,0.0),cvec3(0.0,1.0,0.0),1.0));
 //   setMaximumIterations(5);
}

//-------------------------------------
// ROOT EXPASION
//-------------------------------------

using rootExpansion = rule root 
{
    return true;
} {
    // replace current root node with cube
    appendSymbol(ccube(this.position, cvec3(0.82,0.41,0.117),this.radius));
    if(this.radius > 0.1)
    {
        this.radius = this.radius - 0.1;
        this.position = vec3Add(this.position, vec3ScalarMul(this.direction,this.radius*2.0));
        appendSymbol(this);
    }
    // if tree has desired heigth
    if(this.position.y > 2.0)
    {
        vec3 direction;

            // Create leaves with direction going from the root to space
            direction = cvec3(1.0,0.0,0.0);
            appendSymbol(cleaf(croot(vec3Add(this.position,vec3ScalarMul(direction,this.radius*2.0)), // move it next to the root
                                             direction, // and set new directions
                                             this.radius)));
            direction = cvec3(-1.0,0.0,0.0);
            appendSymbol(cleaf(croot(vec3Add(this.position , vec3ScalarMul(direction,this.radius*2.0)), // move it next to the root
                                             direction, // and set new directions
                                             this.radius)));
            // Create leaves with direction going from the root to space
            direction = cvec3(0.0,0.0,-1.0);
            appendSymbol(cleaf(croot(vec3Add(this.position,vec3ScalarMul(direction,this.radius*2.0)), // move it next to the root
                                             direction, // and set new directions
                                             this.radius)));
            direction = cvec3(0.0,0.0,1.0);
            appendSymbol(cleaf(croot(vec3Add(this.position , vec3ScalarMul(direction,this.radius*2.0)), // move it next to the root
                                             direction, // and set new directions
                                             this.radius)));



    }

};

//-------------------------------------
// LEAVES 
//-------------------------------------



using leafExpansion = rule leaf
{
    return true;
} {
    appendSymbol(ccube(this.node.position, cvec3(0.13,0.54,0.13), this.node.radius));
};



using leafExpansionSides = rule leaf
{
    return true;
} {
    appendSymbol(ccube(this.node.position, cvec3(0.13,0.54,0.13), this.node.radius));

    float result = int(random() * 3.0);

    this.node.direction = vec3ScalarMul(this.node.direction, 2.0*this.node.radius);
    if(result == 0)
    {
        appendSymbol(ccube(vec3Add(this.node.position,this.node.direction), cvec3(0.13,0.54,0.13), this.node.radius));
    } 
    if(result == 1)
    {
        appendSymbol(ccube(vec3Add(this.node.position,rotate90Degrees(this.node.direction)), cvec3(0.13,0.54,0.13), this.node.radius));
    }

    if(result == 2)
    {
        appendSymbol(ccube(vec3Add(this.node.position,rotate90DegreesOpposite(this.node.direction)), cvec3(0.13,0.54,0.13), this.node.radius));

    }
};
