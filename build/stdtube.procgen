#include "stdlinear.gen"

using polygon = struct
{
    vec3 color;
    collection points;
};

int makeTube(vec3 start, vec3 end, float startRadius, float endRadius,vec3 color,float numberOfPoints)
{
    vec3 wayVector = vec3Add(end,vec3ScalarMul(start,-1.0));
    float length = vec3Length(wayVector);

    float numOfPoints = numberOfPoints;
    float anglePerPoint = 360.0/numOfPoints;
    float totalAngle = anglePerPoint;

    mat3 rotation = mat3getRotationFromVector(vec3Normalize(wayVector));
    rotation = mat3Mul(rotation, rotateX(-3.1415*0.5));

    vec3 lastPointStart = vec3(startRadius,0.0,0.0);
    vec3 lastPointEnd = vec3(endRadius,length,0.0);

    collection upFace;
    upFace.insert(vec3Add(start,mat3MulVec3(rotation, lastPointEnd)));
    collection downFace;
    downFace.insert(vec3Add(start, mat3MulVec3(rotation, lastPointStart)));
    while(totalAngle < 360.1)
    {
        collection points; 
        points.insert(vec3Add(start, mat3MulVec3(rotation, lastPointStart)));
        points.insert(vec3Add(start, mat3MulVec3(rotation, lastPointEnd)));

        float radianTotalAngle = 3.1415*totalAngle/180.0;
        lastPointStart = vec3(cos(radianTotalAngle)*startRadius, 0.0, sin(radianTotalAngle)*startRadius);
        lastPointEnd = vec3(cos(radianTotalAngle)*endRadius,length , sin(radianTotalAngle)*endRadius);

        lastPointStart = ( lastPointStart);
        lastPointEnd =  (lastPointEnd);

        points.insert(vec3Add(start, mat3MulVec3(rotation, lastPointEnd)));
        points.insert(vec3Add(start, mat3MulVec3(rotation, lastPointStart)));
        appendSymbol(polygon(color, points));
        totalAngle = totalAngle + anglePerPoint;

        upFace.insert(vec3Add(start, mat3MulVec3(rotation, lastPointEnd)));
        downFace.insert(vec3Add(start, mat3MulVec3(rotation, lastPointStart)));

    }
    appendSymbol(polygon(color, upFace));
    appendSymbol(polygon(color, downFace));
}


int makeLeaf(vec3 start,vec3 wayVector, float sz)
{
    vec3 color = vec3(0.0,1.0,0.0);
    // inspired by
    mat3 transform = mat3getRotationFromVector(wayVector);
    //mat3 transform = getIdentity3();

    transform = mat3Mul(transform, mat3Scale(sz));

    collection points;
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.0,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.1,0.0))));

    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.4,0.3,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.5,0.5,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.4,0.7,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.3,0.8,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,1.0,0.0))));


    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(-0.0,1.0,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(-0.3,0.8,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(-0.4,0.7,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(-0.5,0.5,0.0))));
    points.insert(vec3Add(start, mat3MulVec3(transform,vec3(-0.4,0.3,0.0))));

    appendSymbol(polygon(color, points));

    collection pointsInversed;
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.0,0.0))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.1,0.0))));

    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.3,0.4))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.5,0.5))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.7,0.4))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.8,0.3))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,1.0,0.0))));


    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,1.0,-0.0))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.8,-0.3))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.7,-0.4))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.5,-0.5))));
    pointsInversed.insert(vec3Add(start, mat3MulVec3(transform,vec3(0.0,0.3,-0.4))));

    appendSymbol(polygon(color, pointsInversed));

}



/*
int init()
{
    //makeTube(vec3(0.0,1.0,0.0), vec3(1.0,1.0,0.0), 1.0,0.5,vec3(1.0,0.0,0.0));
    //appendSymbol(polygon( vec3(0.0,1.0,0.0), collection(vec3(0.0,0.0,0.0), vec3(1.0,1.0,0.0), vec3(0.0,1.0,0.0))));
    makeLeaf(vec3(0.0,0.0,0.0), vec3(0.0,0.0,1.0), 1.0);
    makeLeaf(vec3(0.0,5.0,0.0), vec3(0.0,0.0,1.0), 0.1);
}


*/
