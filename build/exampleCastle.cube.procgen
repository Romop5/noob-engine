#include "stdtube.procgen"
//#include "stdlinear.gen"

parameter float PI = 3.1415;
parameter float lengthOfBrick = 0.6;
parameter float bricketHeigth= 0.2;
parameter float bricketGap= 0.001;
parameter float bricketDisplacement= 0.1;


/*using polygon = struct
{
    vec3 color;
    collection points;
};
*/

using point = struct
{
    float x;
    float y;
};
/*
 * This function is used to parser points-defined curve in order
 * to get Y position.
 * Example: ( (0.0,1.0), (1.0,2.0), (1.5,0.0) 
 * NOTE: this function assumees that curvePoints are sorted by X
 * and grow
 */
float curveGetY(collection curvePoints, float x)
{
    if(curvePoints.size() == 0)
    {
        return -1;
    }
    
    // bounded on left by first point
    point start = convert<point>(curvePoints.at(0)); 
    int iterator = 0;
    while(iterator < curvePoints.size())
    {
        point current = convert<point>(curvePoints.at(iterator));
        if(x < current.x)
        {
            // linear interpolation
            float p = (x-start.x)/(current.x-start.x);
            if(p < 0.0)
            {
                p = 0.0;
            }
            return p*current.y + (1.0-p)*start.y;
        } else {
            start = current;
        }
        iterator = iterator + 1;
    }
    // bounded on right by the last point
    return start.y;
}

using block = struct
{
    vec3 position;
    vec3 color;
    vec3 sz;
    mat3 rotation;
};

using floor  = struct
{
    float radius;
    vec3 position;
};

using floorWindow  = struct
{
    float radius;
    vec3 position;
    int count;
};

using floorBuild = rule floor
{
    return true;
} {
    float circum = this.radius*2.0*PI;
    float countOfBricks = circum / (lengthOfBrick + bricketGap);

    float anglePerBrick = 360.0/countOfBricks;
    print(anglePerBrick);

    float anglePassed = 0.0;
    while(anglePassed < 360.0)
    {
        // calculate position
        float radAnglePassed = PI*(anglePassed+(this.position.y/bricketHeigth)*(anglePerBrick*0.5)) / 180.0;
        mat3 rotationCube = rotateY(radAnglePassed);
        vec3 brickPosition = mat3MulVec3(rotationCube, vec3(this.radius+random()*bricketDisplacement,0.0,0.0));
        brickPosition = vec3Add(brickPosition, this.position);
        //vec3 brickPosition = vec3(cos(radAnglePassed)*this.radius+this.position.x,this.position.y, sin(radAnglePassed)*this.radius+this.position.z);

        appendSymbol(block(brickPosition, vec3ScalarMul(vec3(0.1,0.1,0.1),random()), vec3(0.05,bricketHeigth*0.5,lengthOfBrick*0.5),rotationCube));
        anglePassed =  anglePassed + anglePerBrick;
    }
};

using floorBuildWindow = rule floorWindow
{
    return true;
} {
    float circum = this.radius*2.0*PI;
    float countOfBricks = circum / (lengthOfBrick + bricketGap);

    float anglePerBrick = 360.0/countOfBricks;
    print(anglePerBrick);

    float anglePassed = 0.0;

    int iterator = 0;
    while(anglePassed < 360.0)
    {
        // calculate position
        float radAnglePassed = PI*(anglePassed+(this.position.y/bricketHeigth)*(anglePerBrick*0.5)) / 180.0;
        mat3 rotationCube = rotateY(radAnglePassed);
        vec3 brickPosition = mat3MulVec3(rotationCube, vec3(this.radius,0.0,0.0));
        brickPosition = vec3Add(brickPosition, this.position);
        //vec3 brickPosition = vec3(cos(radAnglePassed)*this.radius+this.position.x,this.position.y, sin(radAnglePassed)*this.radius+this.position.z);

        int brickLayerCount = 0;
        while(brickLayerCount < this.count)
        {
            float heigthDisplacement = (float)(brickLayerCount)*bricketHeigth;
            appendSymbol(block(vec3Add(brickPosition,vec3(0.0,heigthDisplacement,0.0)), vec3(0.1,0.1,0.1), vec3(0.05,bricketHeigth*0.5,lengthOfBrick*0.5),rotationCube));
            brickLayerCount = brickLayerCount + 1;
        }
        anglePassed =  anglePassed + anglePerBrick;

        iterator = iterator + 1;
        if(iterator > 3)
        {
            iterator = 0;
            anglePassed = anglePassed + anglePerBrick*2.0;
        }
        
    }
};


using tower = struct
{
    vec3 position;
    float maximumRadius;
    int numberOfFloors;
    collection curvePoints;
};


int buildRoof(vec3 startPosition, float radius)
{
    collection points;
    points.insert(vec3Add(startPosition, vec3(0.0,3.0,0.0)));

    float anglePerPoint = 5.0;
    
    float totalAngle = 0.0;
    while(totalAngle < 360.0)
    {
        float radianAngle = PI*totalAngle/180.0;

        points.insert(vec3Add(vec3(cos(radianAngle)*radius, 0.0, sin(radianAngle)*radius), startPosition));
        totalAngle = totalAngle + anglePerPoint;
    }
    // end of circle
    points.insert(vec3Add(vec3(radius, 0.0, 0.0), startPosition));
    // append polygon
    appendSymbol(polygon(vec3(0.1,0.1,0.1), points));
}

using towerBuild = rule tower
{ return true; } { 
    
    vec3 position = this.position;
    int iterator = this.numberOfFloors;
    while(iterator > 0)
    {
        position.y = position.y + bricketHeigth;
        iterator = iterator -1;
        // create floor
        appendSymbol(floor(this.maximumRadius*curveGetY(this.curvePoints,position.y),  position));
    }
    position.y = position.y + bricketHeigth*0.5;
    //appendSymbol(floorWindow(this.maximumRadius*curveGetY(this.curvePoints,position.y),  position, 4));
    buildRoof(position, curveGetY(this.curvePoints, position.y));
};


using towerWall = struct {
    vec3 start;
    vec3 end;
    float heigth;
    float width;
};


using buildWallRule = rule towerWall {
    return true;
} {

    float length = vec3Length(vec3Add(this.end, vec3ScalarMul(this.start, -1.0))); 
    vec3 forwardVector = vec3Normalize((vec3Add(this.end, vec3ScalarMul(this.start, -1.0)))); 
    vec3 sideVector = vec3Cross(vec3(0.0,1.0,0.0), forwardVector);
    
    float currentHeight = 0.0;
    while(currentHeight < this.heigth)
    {
        float p = 0.0;
        // lay one layer of bricks
        while(p < length)
        {
            vec3 brickColor = vec3ScalarMul(vec3(0.1,0.1,0.1),random());

            vec3 newPos = vec3Add(this.start, vec3ScalarMul(forwardVector, p));
            newPos = vec3Add(newPos, vec3ScalarMul(vec3(0.0,1.0,0.0), currentHeight));
            newPos = vec3Add(newPos, vec3ScalarMul(sideVector, uniform(-1.0, 1.0)*bricketDisplacement*0.1));

            // create two sides
            
            vec3 sideA = vec3Add(newPos, vec3ScalarMul(sideVector, this.width*0.5));
            appendSymbol(block(sideA, brickColor, vec3(0.05,bricketHeigth*0.5,lengthOfBrick*0.5), mat3getRotationFromVector(forwardVector)));

            vec3 sideB = vec3Add(newPos, vec3ScalarMul(sideVector, this.width*(-0.5)));
            appendSymbol(block(sideB, brickColor, vec3(0.05,bricketHeigth*0.5,lengthOfBrick*0.5), mat3getRotationFromVector(forwardVector)));
            p = p + lengthOfBrick+bricketGap; 
        }
        currentHeight = currentHeight + bricketHeigth; 
    }
      
};

/* Tree definition
 */

parameter float GROWRATE =  0.6;
parameter float ANGLE =  30.0;

parameter vec3 BRANCHCOLOR;

using treeBlock = struct
{
    vec3 position;
    vec3 color;
    vec3 sz;
};

using metablock = struct
{
    treeBlock bck;
    vec3 direction;
    int remaining;
};

int addBranch(vec3 start, metablock parent,float rotation)
{
    // get a new vector 
    vec3 dirAngled = vec3VectorWithAngle(vec3Normalize(parent.direction), 3.1415*ANGLE/180.0);

    // rotate new vector around its parent
    mat3 rot = mat3RotateArbitrary(vec3Normalize(parent.direction), rotation);

    // finally, get direction vector for new branch
    vec3 branchDirection = mat3MulVec3(rot, dirAngled);


    appendSymbol(metablock(treeBlock(start, BRANCHCOLOR, parent.bck.sz), branchDirection, parent.remaining -1));
    //appendSymbol(block(vec3Add(start, branchDirection), vec3(0.0,1.0,0.0), vec3(0.1,0.1,0.1)));
}
using leaf = rule metablock
{
    if(this.remaining == 0)
    {
        return true;
    }
    return false;
} {
    vec3 unitVector = vec3Normalize(this.direction);
    unitVector = vec3Add(this.bck.position, vec3ScalarMul(unitVector, this.bck.sz.z));
    vec3 newSize = vec3ScalarMul(this.bck.sz,GROWRATE);
    makeTube(this.bck.position, unitVector, this.bck.sz.x,newSize.x, this.bck.color);

    makeLeaf(unitVector, this.direction, this.bck.sz.z*0.4);
};
using transformRule = rule metablock
{
    if(this.remaining > 0)
    {
        return true;
    }
    return false;
} {
    vec3 unitVector = vec3Normalize(this.direction);
    unitVector = vec3Add(this.bck.position, vec3ScalarMul(unitVector, this.bck.sz.z));

    vec3 newSize = vec3ScalarMul(this.bck.sz,GROWRATE);
    makeTube(this.bck.position, unitVector, this.bck.sz.x,newSize.x, this.bck.color);
    
    vec3 newStart = unitVector;

    this.bck.sz = newSize;

    // add branches
    addBranch(newStart,this,3.14*120.0/180.0);
    addBranch(newStart,this,3.14*240.0/180.0);
    addBranch(newStart,this,3.14*0.0/180.0);

};



int init()
{
    collection simpleCurve = collection(point(0.0,1.5),point(2.0,1.0),point(5.0,1.0),point(5.2,1.1),point(5.4,1.0), point(8.0,1.0),point(9.0,1.5));
    //collection simpleCurve = collection(point(0.0,1.5),point(2.0,3.0),point(5.0,1.0),point(5.2,1.1),point(5.4,3.0), point(8.0,4.0),point(9.0,1.5));
    //appendSymbol(tower(vec3(0.0,0.0,0.0),1.0, 150, simpleCurve));
    //appendSymbol(tower(vec3(4.0,0.0,0.0),1.0, 100, simpleCurve));
    //appendSymbol(tower(vec3(-4.0,0.0,0.0),1.0, 100, simpleCurve));
    //
    appendSymbol(tower(vec3(0.0,0.0,0.0),1.0, 70, simpleCurve));
    appendSymbol(tower(vec3(20.0,0.0,0.0),1.0, 70, simpleCurve));
    appendSymbol(tower(vec3(20.0,0.0,20.0),1.0, 70, simpleCurve));
    appendSymbol(tower(vec3(0.0,0.0,20.0),1.0, 70, simpleCurve));
    appendSymbol(towerWall(vec3(0.0,0.0,0.0), vec3(20.0,0.0,0.0), 6.0, 2.0));
    appendSymbol(towerWall(vec3(0.0,0.0,0.0), vec3(0.0,0.0,20.0), 6.0, 2.0));
    appendSymbol(towerWall(vec3(0.0,0.0,20.0), vec3(20.0,0.0,20.0), 6.0, 2.0));
    appendSymbol(towerWall(vec3(20.0,0.0,20.0), vec3(20.0,0.0,0.0), 6.0, 2.0));

    appendSymbol(block(vec3(0.0,-0.1,0.0), vec3(38.6/255.0, 69.2/255.0, 0.0), vec3(100.0,0.1,100.0),getIdentity3()));

    // spawn randomly trees
    //
    
    BRANCHCOLOR = vec3(0.44,0.17,0.0);
    int countOfGeneratedTrees = 40;
    while(countOfGeneratedTrees > 0)
    {
        vec3 position = vec3(uniform(-100.0,100.0), 0.0, uniform(-100.0,100.0));
        appendSymbol(metablock(treeBlock(position, BRANCHCOLOR, vec3(0.2,0.2,3.0)), vec3(0.0,1.0,0.0),4));
        countOfGeneratedTrees = countOfGeneratedTrees - 1;
    }
}
